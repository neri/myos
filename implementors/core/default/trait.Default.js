(function() {var implementors = {};
implementors["bootprot"] = [{"text":"impl Default for <a class=\"struct\" href=\"bootprot/struct.BootInfo.html\" title=\"struct bootprot::BootInfo\">BootInfo</a>","synthetic":false,"types":["bootprot::BootInfo"]},{"text":"impl Default for <a class=\"enum\" href=\"bootprot/enum.Platform.html\" title=\"enum bootprot::Platform\">Platform</a>","synthetic":false,"types":["bootprot::Platform"]},{"text":"impl Default for <a class=\"enum\" href=\"bootprot/enum.ColorMode.html\" title=\"enum bootprot::ColorMode\">ColorMode</a>","synthetic":false,"types":["bootprot::ColorMode"]},{"text":"impl Default for <a class=\"struct\" href=\"bootprot/struct.BootFlags.html\" title=\"struct bootprot::BootFlags\">BootFlags</a>","synthetic":false,"types":["bootprot::BootFlags"]}];
implementors["kernel"] = [{"text":"impl Default for <a class=\"struct\" href=\"kernel/bus/pci/struct.PciConfigAddress.html\" title=\"struct kernel::bus::pci::PciConfigAddress\">PciConfigAddress</a>","synthetic":false,"types":["kernel::bus::pci::pci::PciConfigAddress"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/io/hid/struct.Usage.html\" title=\"struct kernel::io::hid::Usage\">Usage</a>","synthetic":false,"types":["kernel::io::hid::Usage"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/io/hid/struct.Modifier.html\" title=\"struct kernel::io::hid::Modifier\">Modifier</a>","synthetic":false,"types":["kernel::io::hid::Modifier"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/io/hid/struct.KeyReportRaw.html\" title=\"struct kernel::io::hid::KeyReportRaw\">KeyReportRaw</a>","synthetic":false,"types":["kernel::io::hid::KeyReportRaw"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/io/hid/struct.MouseButton.html\" title=\"struct kernel::io::hid::MouseButton\">MouseButton</a>","synthetic":false,"types":["kernel::io::hid::MouseButton"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/io/hid/struct.MouseState.html\" title=\"struct kernel::io::hid::MouseState\">MouseState</a>","synthetic":false,"types":["kernel::io::hid::MouseState"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/io/hid/struct.MouseEvent.html\" title=\"struct kernel::io::hid::MouseEvent\">MouseEvent</a>","synthetic":false,"types":["kernel::io::hid::MouseEvent"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/rt/haribote/struct.HoeSyscallRegs.html\" title=\"struct kernel::rt::haribote::HoeSyscallRegs\">HoeSyscallRegs</a>","synthetic":false,"types":["kernel::rt::haribote::hoe::HoeSyscallRegs"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/rt/struct.LoadedImageOption.html\" title=\"struct kernel::rt::LoadedImageOption\">LoadedImageOption</a>","synthetic":false,"types":["kernel::rt::LoadedImageOption"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/rt/struct.LegacyAppContext.html\" title=\"struct kernel::rt::LegacyAppContext\">LegacyAppContext</a>","synthetic":false,"types":["kernel::rt::LegacyAppContext"]},{"text":"impl&lt;T&gt; Default for <a class=\"struct\" href=\"kernel/sync/atomicflags/struct.AtomicBitflags.html\" title=\"struct kernel::sync::atomicflags::AtomicBitflags\">AtomicBitflags</a>&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Into&lt;usize&gt; + Default,&nbsp;</span>","synthetic":false,"types":["kernel::sync::atomicflags::AtomicBitflags"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/sync/spinlock/struct.Spinlock.html\" title=\"struct kernel::sync::spinlock::Spinlock\">Spinlock</a>","synthetic":false,"types":["kernel::sync::spinlock::Spinlock"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/sync/spinlock/struct.SpinLoopWait.html\" title=\"struct kernel::sync::spinlock::SpinLoopWait\">SpinLoopWait</a>","synthetic":false,"types":["kernel::sync::spinlock::SpinLoopWait"]},{"text":"impl&lt;T:&nbsp;?Sized + Default&gt; Default for <a class=\"struct\" href=\"kernel/sync/struct.Mutex.html\" title=\"struct kernel::sync::Mutex\">Mutex</a>&lt;T&gt;","synthetic":false,"types":["kernel::sync::mutex::Mutex"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/task/scheduler/struct.Timer.html\" title=\"struct kernel::task::scheduler::Timer\">Timer</a>","synthetic":false,"types":["kernel::task::scheduler::Timer"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/task/scheduler/struct.TimeSpec.html\" title=\"struct kernel::task::scheduler::TimeSpec\">TimeSpec</a>","synthetic":false,"types":["kernel::task::scheduler::TimeSpec"]},{"text":"impl Default for <a class=\"enum\" href=\"kernel/task/scheduler/enum.Priority.html\" title=\"enum kernel::task::scheduler::Priority\">Priority</a>","synthetic":false,"types":["kernel::task::scheduler::Priority"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/task/scheduler/struct.ProcessPool.html\" title=\"struct kernel::task::scheduler::ProcessPool\">ProcessPool</a>","synthetic":false,"types":["kernel::task::scheduler::ProcessPool"]},{"text":"impl Default for <a class=\"struct\" href=\"kernel/task/scheduler/struct.ProcessId.html\" title=\"struct kernel::task::scheduler::ProcessId\">ProcessId</a>","synthetic":false,"types":["kernel::task::scheduler::ProcessId"]},{"text":"impl Default for <a class=\"enum\" href=\"kernel/ui/window/enum.BitmapStrategy.html\" title=\"enum kernel::ui::window::BitmapStrategy\">BitmapStrategy</a>","synthetic":false,"types":["kernel::ui::window::BitmapStrategy"]},{"text":"impl Default for <a class=\"enum\" href=\"kernel/util/text/enum.LineBreakMode.html\" title=\"enum kernel::util::text::LineBreakMode\">LineBreakMode</a>","synthetic":false,"types":["kernel::util::text::LineBreakMode"]},{"text":"impl Default for <a class=\"enum\" href=\"kernel/util/text/enum.TextAlignment.html\" title=\"enum kernel::util::text::TextAlignment\">TextAlignment</a>","synthetic":false,"types":["kernel::util::text::TextAlignment"]},{"text":"impl Default for <a class=\"enum\" href=\"kernel/util/text/enum.VerticalAlignment.html\" title=\"enum kernel::util::text::VerticalAlignment\">VerticalAlignment</a>","synthetic":false,"types":["kernel::util::text::VerticalAlignment"]}];
implementors["megstd"] = [{"text":"impl Default for &amp;<a class=\"struct\" href=\"megstd/struct.OsStr.html\" title=\"struct megstd::OsStr\">OsStr</a>","synthetic":false,"types":["megstd::osstr::OsStr"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/struct.OsString.html\" title=\"struct megstd::OsString\">OsString</a>","synthetic":false,"types":["megstd::osstr::OsString"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/drawing/struct.Point.html\" title=\"struct megstd::drawing::Point\">Point</a>","synthetic":false,"types":["megstd::drawing::coords::Point"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/drawing/struct.Size.html\" title=\"struct megstd::drawing::Size\">Size</a>","synthetic":false,"types":["megstd::drawing::coords::Size"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/drawing/struct.Rect.html\" title=\"struct megstd::drawing::Rect\">Rect</a>","synthetic":false,"types":["megstd::drawing::coords::Rect"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/drawing/struct.Coordinates.html\" title=\"struct megstd::drawing::Coordinates\">Coordinates</a>","synthetic":false,"types":["megstd::drawing::coords::Coordinates"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/drawing/struct.EdgeInsets.html\" title=\"struct megstd::drawing::EdgeInsets\">EdgeInsets</a>","synthetic":false,"types":["megstd::drawing::coords::EdgeInsets"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/rand/struct.XorShift64.html\" title=\"struct megstd::rand::XorShift64\">XorShift64</a>","synthetic":false,"types":["megstd::rand::XorShift64"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/rand/struct.XorShift32.html\" title=\"struct megstd::rand::XorShift32\">XorShift32</a>","synthetic":false,"types":["megstd::rand::XorShift32"]},{"text":"impl Default for <a class=\"struct\" href=\"megstd/sys/fs_imp/struct.OpenOptions.html\" title=\"struct megstd::sys::fs_imp::OpenOptions\">OpenOptions</a>","synthetic":false,"types":["megstd::sys::fs_imp::OpenOptions"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()